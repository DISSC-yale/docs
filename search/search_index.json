{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"DISSC Documentation","text":"<p>This site is a collection of articles, guides, and references, built up as part of work done by the Yale Data-Intensive Social Science Center.</p>"},{"location":"accessing_yale_github_enterpise.html","title":"Access to Yale-managed GitHub","text":"<p>There are times where repositories or associated document pages are made accesible to certain Yale identities. To access these types of sites, you will want to make sure you are logged onto Yale GitHub Enterprise repository. There are 2 requirements to access it:</p> <ol> <li>You will need to be granted access to the repository. </li> <li>You will need to sign in to your Yale-managed GitHub account (which is created automatically).</li> </ol> <p>You can also sign in to your Yale-managed GitHub account from the usual GitHub login screen by typing <code>_yale</code> in the username field, then continuing to the Yale single sign-on provider:</p> <p></p> <p>If you are not signed in to the appropriate GitHub account, you will get a 404 error when trying to follow a site or repository.</p>"},{"location":"dvc_basics.html","title":"What is DVC?","text":"<p>Make sure you have installed it, go to the onboading section </p> <p>DVC was built to solve the problem that git does not like it when you add large files into a repository  but there is value in being able to have your code connected to your data. </p> <p>We want to be able to commit, code and data together so its easy to replicate results or debug certain issues which arise.  DVC makes this a two step process, where code is still added to git but <code>.dvc</code> metadata files are added to git which link to a remote location. This remote location  can be on your machine, on a separate window storage mount or on the cloud. </p>"},{"location":"dvc_basics.html#lets-make-a-repository","title":"Lets make a repository","text":"<p>We are interested in studying hospital characteristics. </p>"},{"location":"dvc_basics.html#create-a-git-repository","title":"Create a git repository","text":"<p>Lets create a git repository to save our code and data. </p> <pre><code>mkdir hospital_characteristics\ncd   hospital_characteristics\ngit init \n</code></pre>"},{"location":"dvc_basics.html#initialize-a-dvc-repository","title":"Initialize a DVC repository","text":"<p>Next lets initialize a DVC repository alongside our </p> <p><pre><code>dvc init\n</code></pre> and its spits out </p> <pre><code>(base) maurice@maurice:~/walkthrough/hospital_characteristics$ dvc init\nInitialized DVC repository.\n\nYou can now commit the changes to git.\n\n+---------------------------------------------------------------------+\n|                                                                     |\n|        DVC has enabled anonymous aggregate usage analytics.         |\n|     Read the analytics documentation (and how to opt-out) here:     |\n|             &lt;https://dvc.org/doc/user-guide/analytics&gt;              |\n|                                                                     |\n+---------------------------------------------------------------------+\n\nWhat's next?\n------------\n- Check out the documentation: &lt;https://dvc.org/doc&gt;\n- Get help and share ideas: &lt;https://dvc.org/chat&gt;\n- Star us on GitHub: &lt;https://github.com/iterative/dvc&gt;\n</code></pre>"},{"location":"dvc_basics.html#lets-create-some-data","title":"Lets create some data","text":"<p>Make sure you are in the repository and lets just save the data at the top of the repository. </p> <pre><code>set obs 50\ngen state = _n\nsave state_data,replace \n</code></pre>"},{"location":"dvc_basics.html#next-add-data-to-dvc","title":"Next add data to DVC","text":"<p><pre><code>dvc add state_data\n</code></pre> </p> <p>This does the following things  </p> <p>Add the file,e.g. <code>state_data.dta</code>, to your <code>.gitignore</code> This ensures that you do not accidentally add the file to git</p> <p>Create a meta data file*, <code>state_data.dta.dvc</code> </p> <p>It creates a file that matches the file you added but with a <code>.dvc</code> stub, e.g. <code>state_data.dta.dvc</code>  which containts metadata about the file. Mostly it has the md5 hash for the data you added.  That provides the connection to the file.       </p> <p>Creates a copy in the cache</p> <p>It adds the file stored as an md5 hash in <code>.dvc</code> under cache. </p> <pre><code>      .dvc\n\u251c\u2500\u2500 cache\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 files\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 md5\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 24\n\u2502\u00a0\u00a0             \u2514\u2500\u2500 1ca1b39e70925e1a70272afce3168d\n</code></pre> <p>To things to note , </p> <ol> <li> <p>We are now carrying an extra copy of this file in the directory and the cache </p> </li> <li> <p>We have not added the metadata to git yet as is demontrated by looking at <code>git status</code></p> </li> </ol> <pre><code>On branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n    new file:   .dvc/.gitignore\n    new file:   .dvc/config\n    new file:   .dvcignore\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    .gitignore\n    state_data.dta.dvc\n</code></pre>"},{"location":"dvc_basics.html#next-we-need-to-add-metadata-to-git","title":"Next we need to add metadata to git","text":"<p>We need to add the metadata and gitignore changes to github. </p> <p><pre><code>git add state_data.dta.dvc .gitignore\n</code></pre> Next we can commit these, as followings. </p> <pre><code>git commit -m \"added a test data\"\n</code></pre>"},{"location":"dvc_basics.html#pushing-data-to-remotes","title":"Pushing data to remotes","text":"<p>The idea of remotes is the main reason that the added complexity of DVC is worth the effort.  Broadly, the cooper lab will host a remote which all data will be pushed too, therefor allowing  for replication and easier sharing of both code and data. </p> <p>Before configuring the main remotes used lets create a toy example, by using a local remote.  This will work similarlly to the remotes when we are dealing with servers. . </p> <p>Let create a folder as follows </p> <pre><code>mkdir ~/dvc_test\n</code></pre> <p>Next make sure you are the dvc repo we created.  Then we need to create a remote, </p> <pre><code>dvc remote add testlocal ~/dvc_test\n</code></pre> <p>We can check the remote by typing  <pre><code>dvc remote list\n\ntestlocal   /home/maurice/dvc_test\n</code></pre></p> <p>Next lets push or data to the remote </p> <pre><code>dvc push --remote testlocal state_data.dta.dvc \n</code></pre> <p>Now our data lives in the remote. </p>"},{"location":"git_basics.html","title":"Why git?","text":"<ul> <li>SOLVES FOR -&gt; what did I do? Need to go back to last version? </li> <li>REQUIRES A -&gt; different way to work </li> </ul> <p>Key ideas</p> <ul> <li> <p>Research is incremental</p> </li> <li> <p>Coding is incremental </p> </li> <li> <p>Version controls (git) allows you to focus on incremental changes </p> </li> <li> <p>allows for better orchestration around code </p> </li> </ul>"},{"location":"git_basics.html#why-git_1","title":"Why Git?","text":"<p>Git is a distributed version control system, it is flexible and widely used. Created by the Linux Kernal developer. Learning git is a transferable skill that builds efficiencies whenever you work with code. </p> <p>Starting to use git requires a slightly different way of working, that may feel like it is adding an administrative burden to you project (why am I commiting this?). The workflow encourages better coding practices as it often forces you to stop and think about the changes you just made and why you made them. </p> <p>Every time you record a change to the repository, known as a 'commit', git take all of the files in your repository and uses them to create a Hash to sign the changes. Having these hashes and knowing what version of paper or presentation came from a hash allows us to link code to the research. </p>"},{"location":"git_basics.html#whats-the-difference-between-git-and-github","title":"Whats the difference between git and GitHub","text":"<p><code>git</code> is version control software that underpins all of the actions on your machines  or on servers you connect to. There are providers that make front ends that make it easier to follow changes made to the code,e.g. GitHub/Gitlab.  These services often run on the cloud and ingest <code>git</code> changes and present them in easier to view webpages. </p> <p>In addition GitHub has other features such as issues, pull requests and in line commenting around code that makes collaborating or tracking incremental changes to code much eaiser. GitHub/GitLab  is also a standard in software development and being at least exposed to it will allow you to interactive with the open data science community and be better positioned to understanding different software packages available. </p>"},{"location":"git_basics.html#using-git","title":"Using Git","text":"<p>Git can be complex, but it does not have to be. This section introduces the basics to using git.  Having a good choosing_text_editors.md##Git can make using git painless. </p> <p>Once you have git installed you will need to make sure its configured with a username and password, these are used to sign changes to the code base. </p> <pre><code>git config --global-user-name \"my name\"\ngit config --global-user-email \"my_email@yale.edu\"\n</code></pre>"},{"location":"git_basics.html#initializing-a-git-repository","title":"Initializing a Git repository","text":"<p>As long as git is installed users initialize a repository by going to the folder and using the command <code>git init</code>.  For example here is what it looks like when you initialize a repo in the <code>whats_for_supper</code> project.  </p> <p>The entire repository lives inside of a <code>.git</code> files and that is all that is created for you. For the most part you do not need to make  changes within this file. </p> <p>It is best practice to create a <code>.gitignore</code> file in the root directory of the project. This is simply a text file that tells git what to ignore.  For example, you may which to ask git to ignore changes made to log files or data files as is often best practice. </p> <pre><code>*.log\n*.dta\n*.csv\n*.lst \n</code></pre>"},{"location":"git_basics.html#adding-changes-to-the-repository","title":"Adding changes to the repository","text":"<p>Once a repository is initialized, the next step involves adding code to git. To understand this process all you need to know that git  will search your repository for changes made. When a change is made it shows up as <code>unstaged</code>. </p> <p>If you just started a new repository, git does not know what folders it should be looking at. To begin with you need to start out by  adding folders to the repository via <code>git add /folder/to/add</code>. Further, you should be sure that the <code>.gitignore</code> file is up to date since this will  save you the headache of unstaging files you do not want in your repository.</p> <p>Generally, adding changes to your repository comes in to steps, there is a temporary step called <code>staging</code> where you move changes to, this maybe a useful way to group many changes into a series of single commits.</p> <p>Once you <code>stage</code> changes then you can push them to the repository with a <code>commit</code>. This takes a message and records all of the changes as well as hash based on the changes made so you can always go back to that process. </p> <p>Git paradigm involves working in a repository </p> <ol> <li> <p>staging area (pre commit, can unstage)</p> </li> <li> <p>commit areas (immutable)</p> </li> </ol>"},{"location":"git_basics.html#strategies-for-grouping-commits-into-meaningful-chunks-of-work","title":"Strategies for grouping commits into meaningful chunks of work","text":"<ol> <li> <p>commits</p> </li> <li> <p>branches </p> </li> <li> <p>Pull/Merge requests </p> </li> </ol>"},{"location":"git_basics.html#what-are-forks","title":"What are forks?","text":"<p>A fork is a copy of a repository, often place in your name space rather then the DISSC space for example.  Its useful in that it creates a complete sandbox of the repo for you to make and change you want with out worrying about how it might impact other users. </p>"},{"location":"git_basics.html#what-are-branches","title":"What are branches?","text":"<p>Branches are copies of a codebase that is within the same repository but sitting in a separate branch then the main branch.  For example, there maybe a main branch in a repository and a separate branch for my work might be called <code>maurice</code> or specific update like  <code>prep_for_nber_si_presentation</code> may work but is within a single repository. These branches can more easily be observed since they all sit within the same repository. Note that forked repository can also be compared but we need to make sure we add the forked repository remote path to the repository. </p>"},{"location":"git_basics.html#what-is-a-merge-request","title":"What is a Merge request ?","text":"<p>Git is decentralized in the sense that many different repositories may exist. In such a world how are changes shared? The idea of merge request involves merging code changes in a branch or fork of repository into another repository. This is often done in the sense when there is one main repository where everyone is pushing changes toward. </p> <p>What if we are not collaborating across users or repositories?: Then Merge requests are still a useful tool in that it allows us to group changes to the code in a meaningful manner. Through the use of a webfront end like gitHub it also allows to easily look at all the changes made, add some text to give a high level over view of the spirit of the changes and call out individuals to review the code. </p> <p>MR do not go away so they create institutional knowledge which connect key changes made to the code base and how they impact a research project. </p> <p>So if multiple people are making changes to a single source of truth repository then how can we be sure that our local repositories are kept upto date?  This is where </p>"},{"location":"git_basics.html#anatomy-of-a-good-merge-request","title":"Anatomy of a good merge request","text":""},{"location":"git_basics.html#what-is-fetch","title":"What is Fetch?","text":"<p>Remember git is decentralized, if you want to look at changes made in other branch or other forked repository you must first do a <code>git fetch</code> all of the other repositories you are \"watching\". In terms of git, \"watching\" means that you have created a <code>git remote</code> this tells git `</p>"},{"location":"git_basics.html#git-and-github","title":"Git and GitHub","text":"<p>GitHub can be though of as a remote front end for using git. It makes collaboration and code review easier and has some nice built in project management features buiilt into it. </p>"},{"location":"git_basics.html#connecting-to-github","title":"Connecting to GitHUB","text":"<ol> <li>We use ssh keys , put the public key into GitHub  www.atlassian.com/git/tutorials/git-ssh</li> </ol>"},{"location":"git_basics.html#working-with-decentralized-version-control-systems","title":"Working with decentralized version control systems","text":"<ol> <li>local version of a git repository has all of the history from where you cloned repository </li> <li>git connects to other repositorys by adding a <code>remote</code> repository. This repo can live locally in another folder or can live in the cloud. </li> </ol>"},{"location":"git_basics.html#workflows","title":"Workflows","text":"<p>To fork or to branch? These are really different paradigm to working on a project. For the purpose of this group we will be working of separate branches on the same hosted github repository. That way its easier to compare what people are working on. If you find that you are working off many different branches then its ok to fork. </p> <p>Protecting a branch is a way of making sure that a branch remains a source of true, where code should be reviewed before being pushed and if possible should be working before being pushed. When a branch is protected, a typical way of pushing code is through creating merge requests (MRs)</p> <p>!!! Do these work on dropbox? No if more then one person is making change.        Unless you unsync the program folders. !!!</p>"},{"location":"git_basics.html#single-researcher","title":"Single researcher","text":""},{"location":"git_basics.html#collabrative-workflows","title":"Collabrative workflows","text":""},{"location":"git_basics.html#incrementing-changes-working-of-diffs","title":"Incrementing changes - working of diffs","text":"<p>Git provides a ways to roll back changes which is useful. The real power in git comes from being able to  track changes you have made since last comit or stage. Being able to work of differences or changes allows you to concentrate on what you have been changing. Its useful when projects get put down or if you have been strategic betwen </p>"},{"location":"git_basics.html#collaborating","title":"Collaborating","text":"<ul> <li>chat feature around pull requests</li> <li>raising issues ; not always necessary. </li> </ul>"},{"location":"git_basics.html#best-practices","title":"Best practices","text":"<ul> <li>Too commit large or small changes ?</li> <li>Creating a branch?</li> <li>Do i need pull request </li> </ul>"},{"location":"git_basics.html#starting-a-new-project","title":"Starting a new project","text":"<p>When starting a new project, create the project on GitHub making sure to use one of the templates. </p> <p>If you want to bring a current project into gitHub, you can create a repo on GitHub and add the <code>remote</code> to the repository  via </p> <p><code>git add remote upsteam git@github.com:Yale-Health-Econ/doc_health.git</code></p>"},{"location":"git_basics.html#creating-a-new-merge-request","title":"Creating a new merge request","text":"<ul> <li>test repository people can do whatever they want to without worrying with breaking anything </li> </ul> <p>main </p>"},{"location":"git_basics.html#working-through-some-examples","title":"Working through some examples","text":"<p>Ready to try out some example. See the git onboarding section for setting up ssh key and some examples to try out</p>"},{"location":"git_basics.html#other-resources","title":"Other resources","text":"<ul> <li>skills.github.com/ ; go through and borrow and tune to the way we will work</li> <li>raw.githack.com/uo-ec607/lectures/master/02-git/02-Git.html#1 : Great intro slides  </li> <li>dropbox and git -- kbjarkefur/GitHubDropBox</li> <li>worldbank/dime-github-trainings </li> </ul>"},{"location":"numerator.html","title":"Numerator","text":"<p>Numerator data are stored on the Grace cluster.</p> <p>See the documentation site for more details and access instructions.</p>"},{"location":"numerator.html#access-the-site","title":"Access the Site","text":"<p>The documentation site is hosted from a Yale GitHub Enterprise repository, so there are 2 requirements to access it:</p> <ol> <li>You will need to be granted access to the repository. If you don't already have access, send a request to <code>dissc@yale.edu</code>.</li> <li>You will need to sign in to your Yale-managed GitHub account (which is created automatically).</li> </ol> <p>You can also sign in to your Yale-managed GitHub account from the usual GitHub login screen by typing <code>_yale</code> in the username field, then continuing to the Yale single sign-on provider:</p> <p></p> <p>If you are not signed in to the appropriate GitHub account, you will get a 404 error when trying to view the site.</p>"},{"location":"numerator.html#access-the-data","title":"Access the Data","text":"<p>The documentation site includes instructions on accessing the Numerator data on the Grace cluster.</p> <p>You can also access the data through a Globus collection, if you want to work with the data in your own system.</p> <p>Access must be requested for each of these methods separately.</p>"},{"location":"using_dvc.html","title":"DVC walkthrough","text":"<p>Our centralized data repository uses Data Version Control and is built on top of git repositories for finding data </p> <p>This will focus on getting you up and runnignw with accessing data with DVC quickly and will leave: </p> <ul> <li>using DVC to tooling section on DVC</li> </ul> <p>The problem:     - You are tasked with finding the most recent AHA cleaned data </p> <p>Dependencies    - If you have not worked through the Using GitHub walkthough and install you should start there</p> <p>Things to be aware of when using DVC   - DVC ends up creating many copies of your data.      Important to keep in mind when working with large data. </p>"},{"location":"using_dvc.html#installing","title":"Installing","text":"<p>The easiest way is to install from the downloaded version on the DVC website landing page  and choose the installation based on your operating system.  The only caveat there is that you will need to repeat the process to update the software in the future. </p> <p>Note if you are working on Windows Linux Subsystem(WSL) on a windows machine then you need to install from the command line and that would look like the following  as documented in the docs !NOT WORKING! <pre><code>sudo wget \\\n       https://dvc.org/deb/dvc.list \\\n       -O /etc/apt/sources.list.d/dvc.list\nwget -qO - https://dvc.org/deb/iterative.asc | gpg --dearmor &gt; packages.iterative.gpg\nsudo install -o root -g root -m 644 packages.iterative.gpg /etc/apt/trusted.gpg.d/\nrm -f packages.iterative.gpg\nsudo apt update\nsudo apt install dvc\n</code></pre></p>"},{"location":"using_dvc.html#osx","title":"OSx","text":"<p>Install homebrew package manager. </p> <p>Next open a terminal and type </p> <pre><code>brew install dvc\n</code></pre> <p>This might take a little while as we have to install dependencies, including arrow. </p>"},{"location":"using_dvc.html#validate-install","title":"Validate install","text":"<p>From the command line type in </p> <pre><code>dvc --version\n</code></pre> <p>And it should spit out the version for you. </p>"},{"location":"using_dvc.html#setting-a-global-cache","title":"Setting a global cache","text":"<p>DVC works by caching files. By fefault it will cache each files inside of the git repository. This is not efficient if you are using the same file in different projects. Its recommended you create a centralized cache to avoid taking up too much space. </p> <p>You do this by selectiong a location and creating a folder and adding a chacne through the DVC command line  <pre><code># Create directory for cahc if it doesnt exist\nmkdir -p ~/.config/dvc/cache\ndvc cache dir --global ~/.config/dvc/cache\n</code></pre> You can check that it is set by </p> <pre><code>dvc config -l\n</code></pre>"},{"location":"using_dvc.html#remotes","title":"Remotes","text":"<p>DVC overcomes some of git's shortcoming around working with large datasets by relying on what they refer to as  remote storage locations. These can be separate folders locally, cloud blob storage or sftp locations. </p> <p>We have decided to use cloud storage and we need to define the remotes locall before we get going. </p>"},{"location":"using_dvc.html#defining-a-remote","title":"Defining a remote","text":"<p>Easiest way is to find the dvc config file. Lets first add a global remote so our dvc file has something to report.</p> <p>Next type in the following to get the locaiton of the file</p> <p><pre><code>dvc config -l --show-origin\n</code></pre> This will return a bunch of lines. What we are looking for is the first part which ends in config. You will want to open that file in  a text editor. For example, when I type the command on a mac it returns  <pre><code>#---returns \n/Users/../../dvc/config remote.wasabi.url=s3://url/to/bucket\n</code></pre> Where <code>/Users/../../dvc/config</code> is my config file. We want to open that file  and add the following which defined a global remote called wasabi.  The remote wasabi has the connection details. </p> <pre><code>[core]\n    remote = wasabi\n    autostage = true\n['remote \"wasabi\"']\n    url = {s3://your-s3/bucket}\n    region = us-east1\n    endpointurl = {endpoint}\n    access_key_id = {access_key_id}\n    secret_access_key = {secret_access_key}\n</code></pre> <pre><code>dvc remote default --global  wasabi \n</code></pre>"},{"location":"using_dvc.html#task-lets-get-some-data","title":"Task: Lets get some data","text":"<p>Lets say we are interested in pulling in some of the work that crosswalks hospital ID found in NPPES and CMS data. </p>"},{"location":"using_dvc.html#finding-data","title":"Finding data","text":"<p>We first would find the repo of interest, which could be done by searching for NPPES. </p> <p>Note that search in github will search across all of the codebase in the repository as well as repository descriptions.  Since were looking for data, probably makes sense to filter on repositorys. </p> <p>From looking at the repos we are interested in the <code>infra_provider-xw</code> repository. </p> <p>To bring that data into our project we need only the gitHub repo, a link to the relative path to the data folder or files we want to import.  I we look at the raw data folder, we see the following. We can either choose to import the entire directory or a single file. Lets assume we are not sure what file we need and we just  want to pull the entire directory.  <pre><code>0raw\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 hosp_npi_aha_crosswalk_yale.csv.dvc\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hosp_npi_aha_crosswalk_yale.csv.readme.dvc\n</code></pre></p>"},{"location":"using_dvc.html#getting-data","title":"Getting data","text":"<ol> <li> <p>You need to be inside a git and dvc repository </p> <p>a. <code>mkdir project</code></p> <p>b. <code>git init</code></p> <p>c. <code>dvc init</code></p> </li> <li> <p>The dit/dvc repository needs to now where the remote repository lives </p> <p>a. from inside the new git repository enter the following </p> <pre><code>dvc remote default wasabi --local \n</code></pre> </li> <li> <p>Import the data     </p> <p>a. <code>--out</code> tells dvc where to save files </p> <p>b. <code>--remote</code> tells which remote to use to get data. Need this with samba since maybe mounted at different point on different machines </p> <p>c.  <code>git clone stub</code>: this is the location of the git repo which holds meta data for data </p> <p>d. <code>data file or folder ,e.g  0raw</code>: Tells DVC which data files to grab within repo. Can find this in github repo with files ending in <code>dvc</code> </p> <p>This can be done from the command line, if you are in windows you can do this through.the bash emulator.</p> </li> </ol> <pre><code>dvc import --out dependency/infra_xw --remote wasabi git@github.com:cooper-lab/infra_provider-xw.git 0raw \n</code></pre> <pre><code>!!! dvc import can be a little finicky, need to make sure remotes are set locally\n</code></pre> <p>.</p>"},{"location":"using_dvc.html#task-project-data","title":"Task: Project data","text":"<p>It can also be used to save entire projects where the code and remote data are linked and several users can work with the same  data or easily move to a new environment.</p>"},{"location":"using_git.html","title":"Git walkthrough","text":"<p>It might be useful to read over the general git section under tooling  before reading through but its not necessary. </p> <p>Ensure that you have access to the access to GitHub repository. Request access if you do not have it. </p> <p>After completing this section you will have: </p> <ol> <li> <p>Set up your computer to communicate with GitHub</p> </li> <li> <p>Completed a sample pull request and created an issue from a demo_project repository</p> </li> </ol>"},{"location":"using_git.html#connecting-to-github","title":"Connecting to GitHub","text":"<p>Connection to GitHub cloud server is via a sshkey authentication. This means that you create a public private ssh key locally and you share your public key pair with GitHub  which uses a one-way crytographic hash function to authenticate the pair. </p>"},{"location":"using_git.html#local-git-installation","title":"Local Git installation","text":"<p>We need a local git installation to use it and to interact with GitHub which is basically a git cloud hosted service with a nice front end. </p>"},{"location":"using_git.html#installing","title":"Installing","text":""},{"location":"using_git.html#windows","title":"Windows","text":"<p>You have two options, one is to install linux on windows and follow Linux/Mac commands  or you can install a command line emulator as documented below. </p> <p>If you decide to use a bash emulator, see this handy Atlassian tutorial for more info</p> <ol> <li> <p>Download and install from gitforwindow.org</p> </li> <li> <p>You will be asked about many features, at a minimum you need to install git but there other features that might be worthwhile exploring.</p> </li> </ol>"},{"location":"using_git.html#linux-mac","title":"Linux/ Mac","text":"<ol> <li> <p>Open command line and type  <code>git --version</code> to see if it installed, make sure its the most recent </p> </li> <li> <p>can be installed via package managers like <code>apt-get</code> for Ubuntu or <code>homebrew</code> for mac </p> </li> </ol>"},{"location":"using_git.html#configuring","title":"Configuring","text":"<p>Users need to set the default email address and name used for git using </p> <p><pre><code>git config --global user.name \"First Last\"\ngit config --global user.email \"first.last@yale.edu\"\n</code></pre> Note that the email should match the email on your github account. </p>"},{"location":"using_git.html#connecting-to-github_1","title":"Connecting to GitHub","text":"<p>Authentication happens via ssh keys. These are created via the command line and used as a way for third-party's to authenticate with your computer.  We use and create these to communicate with GitHub. </p> <p>Given that we installed git-bash on Windows, the process of creating ssh-keys is the same in all environments and  involves typing a couple of commands into the terminal. The process creates a ssh-key pair. </p> <ul> <li>a public key ,e.g. <code>id_rsa.pub</code> with the <code>pub</code> stub </li> <li>a private key, e.g. <code>id_rsa</code> which should never be shared</li> </ul> <p>We will share the public key with gitHub. Note a nice overview is found here</p>"},{"location":"using_git.html#create-ssh-keys-locally","title":"Create ssh keys locally","text":"<p>Open a terminal if using Linux/Mac or gitbash if using Windows and type in the following</p> <pre><code>  ssh-keygen -t rsa -b 4096 -C \"your_email@yale.edu\"\n</code></pre> <p>It will take a second to create ssh-keys for you </p> <p><pre><code> Generating public/private rsa key pair.\n</code></pre>  Then it will ask where to save your keys. By default it saves in your home directory under   the <code>.ssh</code> folder which is hidden by default since it start with a dot. You will need to be able to access the   folder to copy in your public key to github. If you are unsure, keep the default. </p> <pre><code>Enter file in which to save the key (/home/user-name/.ssh/id_rsa): \n</code></pre> <p>Next it will ask you to create a passphrase. I suggest entering a passphrase that is easy for you to  remember in that it gives an extra level of protection. </p>"},{"location":"using_git.html#start-ssh-agents","title":"Start ssh agents","text":"<p>Next you will need to start the ssh agent and add your keys to it so your computer knows where to look for them.  <pre><code> eval \"$(ssh-agent -s)\"\n</code></pre></p> <p>which will return something like <code>&gt; Agent pid 59566</code></p> <p>Next add your keys to the ssh-agent by </p> <pre><code>ssh-add  /Users/you/.ssh/id_rsa\n</code></pre>"},{"location":"using_git.html#share-public-key-with-github","title":"Share public key with GitHub","text":"<p>Open up your GitHub account , under your profile there is a setting button, click on that.  Go to the left hand side and got to the <code>SSH and GPG keys</code> menu </p> <p></p> <p>Next go ahead and add the public key you saved above in creating ssh keys by  clicking on the green button.</p> <p></p> <p>Next you will be prompted with </p> <p></p>"},{"location":"using_git.html#test-connection","title":"Test connection","text":"<p>Open up a terminal, if your in windows this would be a bash emulator or WSL which runs a linux virtualization within windows.</p> <p><code>ssh -T git@github.com</code></p>"},{"location":"using_git.html#example-workflow-example","title":"Example workflow example","text":"<p>Lets use the example repository in our group called demo_project to work through and example workflow. </p> <ol> <li> <p>Create an issue and call out a team member </p> </li> <li> <p>Clone the repository locally </p> </li> <li> <p>Make changes to the local repository, commit locally </p> </li> <li> <p>Pushing changes and ensuring you have the most upto date version.</p> </li> </ol>"},{"location":"using_git.html#1-create-an-issue","title":"1. Create an issue","text":"<p>Create an issue and call out a team member </p> <p>Create an issue in the  demo_project repository. Note that  we have created some templates to try to make it easier to decide what should be an issue. In general,  information about a project or dataset that might be useful for future researchers to have access to are probably a good place to put the here  . </p>"},{"location":"using_git.html#2-clone-repo-locally","title":"2. Clone repo locally","text":"<p>Go to the  demo_project repository and click on the clone button and copy the ssh code  </p> <p>Next on your local machine open up a terminal or command line and type in the folloiwng </p> <p><pre><code>git clone git@github.com:DISSC-yale/demo.git\n</code></pre> This create a local clone of the git repository so you can make changes. </p> <p>Note since we cloned it from github the origin remote is our github repo.  You can see this by typing </p> <p><pre><code>git remote -v \n</code></pre> And it prints out the remotes </p> <pre><code>origin  git@github.com:DISSC-yale/demo.git (fetch)\norigin  git@github.com:DISSC-yale/demo.git (push)\n</code></pre> <p>When we are pushing, pulling and fetching changes we will do this against the <code>origin</code> remote which is linked to github. Note the origin remote could be a forked version or even just another version of the code living in a different path.</p>"},{"location":"using_git.html#3-make-changes-locally","title":"3. Make changes locally","text":"<p>Lets go ahead and make a change to the demo repository. </p> <ul> <li> Create a file in the repository and add some text to it</li> </ul> <p>You can do this from a linux type terminal by doing the following </p> <p><code>bash  echo \"This is a test by user1\" &gt;&gt; newfile</code></p> <p>And lets make another file </p> <p><code>bash  echo \"This is a test by user1\" &gt;&gt; makingchanges</code></p>"},{"location":"using_git.html#4-update-local-git-repository","title":"4. Update local git repository","text":"<p>Once changes have been made there are two steps to adding them to the git repository. </p> <p>You can check the status of your changes by typing in to the command line  <pre><code>git status\n</code></pre> Which shows  </p> <p>If you are using a full fledged text editor you can avoid the command line, for example here is what it looks like in vscode  and the changes show up automatically in the text editor and its very easy to see what has changed.   </p>"},{"location":"using_git.html#prep-changes-to-be-added-stage","title":"Prep-changes to be added (Stage)","text":"<p><code>Stageing</code>  has two functions, it allows you to easily checkpoint change you are making so you can track difference and it  allows you to group changes together so they can be ready to be commited. </p> <p>We go ahead and stage changes by using an IDE or by using </p> <pre><code>git add makingchanges newfile \n</code></pre> <p>Then by checking on <code>git status</code></p> <p></p>"},{"location":"using_git.html#adding-changes-to-repository-commit","title":"Adding changes to repository (Commit)","text":"<p>So we have our changes staged, next we add them to the repository. This is immutable, once a change is commited  it stays in the log. You are also prompted for message to the changes you are adding. </p> <p>You should make things as concise as possible and focus on the WHY of the change, since its pretty easy to look at diffs.  If the change is addressing a bug  or an issue it worth adding a link to the commit about that as well. </p> <p>Not you can add the message in the command line  <pre><code>git commit -m \"Testing out git functionality\"\n</code></pre></p> <p>Or leave it out, in which case a text editor will open for you to make the change. The first line is often very concise and the body can be much longer if you want. If you have a long message its worth using <code>git commit</code> <pre><code>git commit\n</code></pre></p>"},{"location":"using_git.html#5-update-github","title":"5. Update GitHub","text":""},{"location":"using_git.html#send-push-local-changes-to-github","title":"Send (push) local changes to Github","text":"<p>Now the local repository is out of sync with the repository hosted at GitHub. Local changes to need to be  sent or pushed in git terminology to github. </p> <p>Pushing changes takes two parameter     1. git remotes which are the  location of other copies of the repo. When you clone a repo from GitHub the default name is <code>origin</code>     2. A branch so git know where to put our changes </p> <p>The remote is pretty clear, its <code>origin</code> and can be checked with <code>git remote -v</code>. The branch is more flexible and in line with our    workflow, the main branch can not have any changes pushed to it. Each user will push there changes to branch of there choosing,     in general it should be there name. </p> <p>Locally we are working on the <code>main</code> branch by default and that can be checked by <code>git branch</code>.</p> <p>So we use the <code>git push</code> command and the remote we want to push it to, <code>origin</code> and a branch. If the branch does not exist    we use the following <code>main:maurice</code> which says send the <code>main</code> local branch to remote <code>maurice</code> branch </p> <pre><code>git push origin main:origin/maurice\n</code></pre> <p>All of this is made much easier by using an IDE like EMACS or Vscode. </p>"},{"location":"using_git.html#create-a-pull-request-on-github","title":"Create a pull  request on GitHub","text":"<p>Go to the GitHub reposotory and there should be a green blob at the top that says, you have a new branch.   Do you want to create a pull request. Click on it. </p> <p>You are prompted to write a little about the pull request. Again focusing on the why or referencing relevent issues, emails or pr are worth while. </p> <p>Add a reviewer if you want someone to take a look. </p> <p>Create the pull request.</p> <p>Once you create it there is the ability to add comments around the code. </p> <p>Someone needs to accept the pull request before it gets merged in. If you want someone to take a look they will do that. if you are  just documenting changes you made, e.g. these are the changes for the conference. You can accept the change and merge it yourself. </p> <p></p>"},{"location":"using_git.html#6-get-new-github-change-locally-fetch-pull","title":"6.  Get new GitHub change locally (fetch-pull)","text":"<p>If you are working with someone else or returning to a repository where many people are making changes. Its best to  make sure you have all of the most recent changes. </p> <p><code>git fetch origin</code> will get all changes on origin  <code>git pull origin main</code> will pull all of the changes from origin on the main branch to the current branch. </p> <ul> <li>may cause some conflict </li> <li>git pull only brings things in from the last git fetch, so important to run git fetch so changes in the   cloud are cached or flagged locally.</li> </ul>"},{"location":"using_git.html#using-ides","title":"Using IDES","text":"<p>Using git is much easier if you use and IDE like vscode or emacs or local gui front end like gitKraken.</p> <p>For example this is what it looks like in emacs </p> <p></p>"},{"location":"using_git.html#other-resources","title":"Other resources","text":"<ul> <li> <p>Reading on some common git workflow</p> </li> <li> <p>Overview of some common git syncing commands </p> </li> <li> <p>BitBucket is a GitHub competitor but has good documention</p> </li> <li> <p>More BitBucket reading on setting up a repo</p> </li> <li> <p>Useful walkthrough</p> </li> </ul>"},{"location":"hpc/ood.html","title":"Interactive Sessions","text":"<p>Open OnDemand (OOD) is a web-based portal to access YCRC cluster's resources. Using Open OnDemand (OOD), you can start interactive sessions on a high-performance computing (HPC) cluster through a browser.</p> <p>See the Yale Center for Research Computing (YCRC) page to access this at Yale.</p> <p>As part of starting an interactive session, you may need to set a few parameters, which will determine what hardware and software is available in the session, as well as the session length.</p> <p>If you're starting an interactive app (such as RStudio), the first thing you may need to select is the software version. It is generally best to select the latest version.</p>"},{"location":"hpc/ood.html#hardware","title":"Hardware","text":"<p>Parameters that relate to the hardware: </p> <ul> <li>Number of Hours: How long you need the session to run. Start with a short duration for testing. It is good practice to stop your session when you are finished by clicking on <code>Cancel</code> in My Interactive Sessions.</li> </ul> <ul> <li>CPU cores: This will determine how many cores / threads you will be able to use, and, if memory is tied to cores, how much total memory you have available. For simple tasks, 1 or 2 CPUs is sufficient.</li> <li>Memory: This will determine the amount of memory / RAM you will be able to use, which will be particularly relevant if you want to load in large portions of data into memory.</li> <li>Partition: These may have different hardware (such as CPU types, or GPUs) and different limitations (such as number of CPU cores and amount of memory). The <code>devel</code> partition is the default but limits you to 32 GiB of memory. The <code>day</code> partition provides access to higher-memory machines.</li> </ul> <p>The appropriate settings will depend on what you're doing, but if you run into issues (such as if things are running slowly or crashing), you might try adjusting these parameters.</p>"},{"location":"hpc/ood.html#software","title":"Software","text":"<p>Additional software can by loaded through modules. From a terminal (e.g., accessible from Clusters &gt; Shell Access on an OOD dashboard), you can use the <code>module spider</code> command to find specific module names.</p> <p>For instance, you might need Arrow, so you could search through available modules:</p> <pre><code> module -r spider 'Arrow.*'\n</code></pre> <p>For more information about modules, please review YCRC documentation.</p> <p>Contact DISSC at <code>dissc@yale.edu</code> or YCRC at <code>hpc@yale.edu</code> if you have any questions.</p>"},{"location":"hpc/quick_start.html","title":"YCRC cluster quick start","text":"<p>This document outlines the process for setting up an account, accessing data, transferring files, and working on the Yale high-performance computing (HPC) clusters.</p> <p>Please review the Yale Center for Research Computing (YCRC) policies and best practices.</p> <p>-</p>"},{"location":"hpc/quick_start.html#requesting-a-ycrc-account","title":"Requesting a YCRC Account","text":"<p>If you do not already have a Yale Center for Research Computing (YCRC) HPC account, you can request one for the desired cluster by filling out the account request form. For example, you should specify the <code>Milgram</code> cluster if the data you data you want to access lives in Milgram. Once you complete the form, YCRC will reach out to you. Once an account is set up, DISSC staff can assist to granting access to datasets.</p>"},{"location":"hpc/quick_start.html#dissc-managed-access-controls","title":"DISSC managed access controls","text":"<p>For researchers who are working with DISSC to manage access controls please reference this section. Please contact us if this is something your interested in and we can discuss options. </p> <p>To grant another user access to data stored on a cluster, follow these steps:</p> <ol> <li>Ensure the user has requested an account for the cluster containing the data with you listed as the PI on the account request form.</li> <li>If the user is a non-Yale collaborator, you must first request a sponsored identity for them.</li> <li>Email <code>dissc@yale.edu</code> with the following information:<ul> <li>User's first and last name.</li> <li>User's NetID, if possible (it is not strictly necessary).</li> <li>The dataset and path you want to grant them access to and any relevant information associated with the request.</li> </ul> </li> <li>DISSC will provide access, apply the necessary Access Control Lists (ACLs), and log the request.</li> </ol>"},{"location":"hpc/quick_start.html#transferring-data-tofrom-the-cluster","title":"Transferring Data to/from the Cluster","text":"<p>For comprehensive documentation, please see the official YCRC guides:</p> <ul> <li>Data Transfer Overview</li> <li>Using Globus</li> </ul>"},{"location":"hpc/quick_start.html#small-data-10-gib","title":"Small Data (&lt; 10 GiB)","text":"<p>The easiest method for small files is to use the File Transfer feature directly within Open OnDemand (OOD). Within OOD you may use <code>Copy/Move</code> to transfer small files.</p>"},{"location":"hpc/quick_start.html#medium-to-large-data","title":"Medium to Large Data","text":"<ul> <li>Globus: Provides a user-friendly graphical interface for managing transfers. To use it, download Globus Connect Personal, complete the setup process, and connect your local computer with the<code>Yale CRC Milgram</code> collection.</li> <li>Command Line: Tools like <code>rsync</code> or <code>scp</code> are effective for transferring medium-sized data directly from your terminal.</li> </ul> <p>For assistance with any data transfer method, please reach out to DISSC at <code>dissc@yale.edu</code> or YCRC at <code>hpc@yale.edu</code>.</p>"},{"location":"hpc/quick_start.html#working-at-ycrc-with-with-open-ondemand-ood","title":"Working at YCRC with with Open OnDemand (OOD)","text":"<p>For an overview of the OOD portal, please see here. </p> <p>OOD allows you to work on different clusters using an easy to use front end accesible through a web browser. </p> <p>Note: You must be signed into Yale\u2019s VPN to access the portal.</p> <p>It is important to note that YCRC uses SLURM to schedule both batch and interactive jobs. <code>Partition</code> in this context references the the clusters you can submit jobs to. These will set the limits on single node processing in terms of max mem or number of CPUs.</p>"},{"location":"hpc/quick_start.html#milgram-ood-dashboard-link","title":"Milgram OOD Dashboard Link:","text":"<ul> <li>Milgram partitions: provides an overview of resources available.</li> <li>user portal: Provides cluster usage, job status, and other useful information about your Grace account please review your.</li> </ul>"},{"location":"hpc/quick_start.html#grace-ood-dashboard-link","title":"Grace OOD Dashboard Link:","text":"<ul> <li>See all available partitions for Grace here.</li> <li>user portal: Provides cluster usage, job status, and other useful information about your Grace account please review your.</li> </ul> <p>Its important to note that different clusters may have different software modules and levels of memory and cpu/gpus accesible to them. </p>"},{"location":"hpc/quick_start.html#starting-an-interactive-session","title":"Starting an Interactive Session","text":"<p>YCRC provides detailed documentataion, please refer to interactive apps section for a walkthrough.  From the OOD dashboard, you can launch an interactive session (e.g., Stata, RStudio, or a general Linux Desktop).</p> <ol> <li>Choose the type of instance you want to start.</li> <li>Configure the session resources:<ul> <li>Partition: See all available partitions for Milgram here for example.</li> <li>Modules: When you launch a specific application like <code>RStudio</code> or <code>Stata</code>, the required modules are loaded automatically. To use software from the generic remote desktop instance, you will need to load the modules manually. See YCRC docs for more information on working with modules.</li> <li>Monitor Jobs: To review your cluster usage, job status, and other useful information about your Milgram account please review your user portal.</li> </ul> </li> </ol> <p>Note: If you want to run Stata, check the Milgram Stata license to determine the maximum number of cores it can use.</p>"},{"location":"hpc/quick_start.html#submitting-batch-jobs","title":"Submitting Batch Jobs","text":"<p>If you require more resources or need to run a non-interactive task, you can submit a batch job to the cluster. Please contact DISSC or YCRC for an example submission script.</p>"},{"location":"hpc/quick_start.html#working-on-the-virtual-desktop","title":"Working on the Virtual Desktop","text":"<p>DISSC is developing simple shortcuts for launching applications like LibreOffice (for Word/Excel documents), RStudio, and Stata directly from the virtual desktop. We will work with you to set this up and update this documentation accordingly.</p>"}]}